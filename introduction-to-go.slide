Introduction to Go
Women Who Go Tokyo
10 Dec 2016

Dave Cheney
dave@cheney.net
http://dave.cheney.net/
@davecheney

* License and Materials

This presentation is licensed under the [[https://creativecommons.org/licenses/by-sa/4.0/][Creative Commons Attribution-ShareAlike 4.0 International]] licence.

The materials for this presentation are available on GitHub:

.link https://github.com/davecheney/introduction-to-go

You are encouraged to remix, transform, or build upon the material, providing you give appropriate credit and distribute your contributions under the same license.

If you have suggestions or corrections to this presentation, please raise [[https://github.com/davecheney/introduction-to-go/isues][an issue on the GitHub project]].

* Agenda

This workshop is aimed at programmers with experience in another programming language and want to learn how to apply their skills to Go.

This workshop consists of five main sections:

- Basic Syntax
- Advanced Syntax
- Development environment and tooling
- The standard library
- Packages and applications

After each section we'll have time for questions.

As we work through the day there will be less of me talking, and more exercises to help you learn Go via doing.

* The Go programming language

- Modern
- Compact, concise, general-purpose
- Imperative, statically type-checked, dynamically type-safe
- Garbage-collected
- Compiles to native code, statically linked
- Fast compilation, efficient execution

Designed by programmers for programmers!

.link https://talks.golang.org/2014/taste.slide#2 Source: Robert Griesemer, A Taste of Go.

* Speed

Go is often noted for its fast compilation, but this is only one facet of the idea of Go being a _fast_ language to program in.

"False dichotomy of static languages being 'slow and painful' and dynamic languages being 'fast and fun'" -Rob Pike

"Clumsy type systems drive people to dynamically typed languages" -Robert Griesemer

Go is an attempt to demonstrate that a language can be both fast in terms of the programs it produces and fast (productive?) for the programmers.

* Safety

- Typed, and type safe

 var i int = -1
 var u uint = 200
 i = u   // nope, incompatible types

- Array accesses are bounds checked

 s := make([]string, 10)
 x := s[20] // will panic at runtime

- All memory is zeroed if not explicitly initialised

 var q int       // initialised to 0
 var f = 7       // initialised to 7, type defaults to int

- No implicit conversions; booleans and integers are not aliases

 i := 2
 if i { ... }    // nope, no coercion to bool

* Good support for concurrency and communication

- Multicore CPUs are a reality.
- Multiprocessing is not a solution.
- Networking support baked into the standard library, integrated into the runtime.

* Garbage collected

Go is a garbage collected language.

- Eliminates the bookkeeping errors related to ownership of shared values.
- Eliminates an entire class of use after free and memory leak bugs.
- Enables simpler, cleaner, APIs.

The garbage collector handles heaps into the 100's of GB range, and is designed for extremely low "stop the world" pauses.

In Go 1.7 these pauses are now less than 100 microseconds.

* Opinionated

Go is an opinionated language.

- Unused local variables are an error.
- Unused imports are also an error.
- The compiler does not issue warnings, only errors.
- A single way to format code as defined by `go`fmt`.
